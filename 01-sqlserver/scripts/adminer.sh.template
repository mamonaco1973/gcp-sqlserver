#!/bin/bash
# ===================================================================================================
# PURPOSE:
#   This script installs Microsoft SQL Server CLI tools (sqlcmd),
#   executes multiple SQL scripts against a target SQL Server instance,
#   and deploys Adminer (a lightweight web-based database client) under Apache2.
# ===================================================================================================

# ===========================
# INSTALL SQL SERVER CLI TOOLS
# ===========================

# Download Microsoft's public signing key and save it in the system's trusted keyring directory.
# This ensures that packages downloaded from Microsoft repositories can be verified for authenticity.
curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc > /dev/null

# Add Microsoft's Ubuntu package repository for SQL Server tools to the system's sources list.
# This makes 'mssql-tools' available for installation via apt.
echo "deb [arch=amd64] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list

# Update the list of available packages to include the newly added Microsoft repository.
sudo apt-get update -y

# Install 'mssql-tools' (contains sqlcmd, bcp) and 'unixodbc-dev' (ODBC driver dependencies).
# 'ACCEPT_EULA=Y' automatically accepts Microsoft's license terms to avoid interactive prompts.
sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev > /tmp/mssql-tools.log

# Extend PATH to include the directory where sqlcmd and bcp are installed.
# This allows these commands to be run from any location in the shell session.
export PATH="$PATH:/opt/mssql-tools/bin"

# ===========================
# EXPORT DATABASE CREDENTIALS
# ===========================
# These environment variables are expected to already be set externally.
# Re-exporting them ensures they are available to subsequent commands.
#   DBUSER     = SQL Server username
#   DBPASSWORD = SQL Server password
#   DBENDPOINT = SQL Server host or IP with optional port (e.g., "10.0.0.3" or "10.0.0.3,1433")
export DBUSER="${DBUSER}"
export DBPASSWORD="${DBPASSWORD}"
export DBENDPOINT="${DBENDPOINT}"

# ===========================
# EXECUTE SQL FILES IN ORDER
# ===========================
# Each sqlcmd call:
#   -S : Server hostname or IP address.
#   -U : SQL Server username.
#   -P : SQL Server password.
#   -i : Input SQL script file.
# Output from each run is redirected to a separate log file under /tmp for troubleshooting.

cd /tmp
git clone https://github.com/mamonaco1973/pagila-sqlserver.git
cd pagila-sqlserver

sqlcmd -S "$DBENDPOINT" -U "$DBUSER" -P "$DBPASSWORD" -i "1.pagila-create-db.sql"   > /tmp/1.pagila-create-db.sql.log 2> /tmp/1.pagila-create-db.sql.error
sqlcmd -S "$DBENDPOINT" -U "$DBUSER" -P "$DBPASSWORD" -d pagila -i "2.pagila-tables.sql"      > /tmp/2.pagila-tables.sql.log 2> /tmp/2.pagila-tables.sql.error
sqlcmd -S "$DBENDPOINT" -U "$DBUSER" -P "$DBPASSWORD" -d pagila -i "3.pagila-data.sql"        > /tmp/3.pagila-data.sql.log 2> /tmp/3.pagila-data.sql.error
sqlcmd -S "$DBENDPOINT" -U "$DBUSER" -P "$DBPASSWORD" -d pagila -i "4.pagila-schema.sql"      > /tmp/4.pagila-schema.sql.log 2> /tmp/4.pagila-schema.sql.error

# NOTES:
# - The order of execution is important: database creation → data load → views → schema changes.
# - If any script fails, sqlcmd will still attempt the next script. Consider adding "set -e" for strict failure handling.

# ===========================
# INSTALL ADMINER (WEB CLIENT)
# ===========================

# Install Apache2 web server, PHP interpreter, and Sybase PHP module (for SQL Server compatibility).
sudo apt install apache2 php libapache2-mod-php php-sybase -y

# Create Adminer’s directory under the Apache web root if it does not already exist.
sudo mkdir -p /var/www/html/adminer

# Download the latest version of Adminer (single PHP file) and store it as index.php in Adminer’s directory.
sudo wget https://www.adminer.org/latest.php -O /var/www/html/adminer/index.php

# ===========================
# REPLACE DEFAULT APACHE INDEX PAGE
# ===========================
# The default index.html is replaced with a redirect page to /adminer for convenience.
# This ensures that visiting http://<server-ip>/ will automatically load Adminer.

sudo tee /var/www/html/index.html > /dev/null <<EOF
<!DOCTYPE html>
<html>
  <head>
    <!-- Meta refresh triggers an instant redirect to ./adminer -->
    <meta http-equiv="refresh" content="0; url=./adminer" />
    <script>
      // JavaScript fallback redirect in case meta refresh fails
      window.location.href = "./adminer";
    </script>
    <title>Redirecting...</title>
  </head>
  <body>
    <!-- Visible link for users in case automatic redirect does not work -->
    If you are not redirected automatically, <a href="./adminer">click here</a>.
  </body>
</html>
EOF

# Restart Apache to apply changes and ensure Adminer is accessible immediately.
systemctl restart apache2

# Enable Apache service to start automatically on system boot.
systemctl enable apache2
